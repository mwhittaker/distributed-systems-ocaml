{2 Distributed Systems}

{8 Section I: The Basics}
In this section, we'll learn the basic programming constructs and libraries we
need to write distributed systems in OCaml. After this section, we'll know how
to
{ul
    {- do multiple things at the same time with Async }
    {- read and write data to and from the outside world with the Reader and
       Writer module }
    {- send simple messages between processes using TCP }
    {- convert OCaml values into bytes and back using various forms of
    serialization }
    {- send more complex messages between processes using TCP and RPC }
    {- Persist information to stable storage }
}

{9 Chapter 1: Async}
Concurrency and parallelism are at the heart of distributed systems. When
programs scale to multiple threads, processes, or machines, we have to reason
about multiple computations that are all happening at the same time. In this
chapter, we explore Jane Street's monadic cooperative multithreading library:
Async. Async is a library that makes writing concurrent code fun and easy!
Async will also serve as a building block throughout the rest of the book; all
the code we write will involve async. Before we dive into some code, I
recommend you read
{{:https://realworldocaml.org/v1/en/html/concurrent-programming-with-async.html}
Chapter 18 of Real World Ocaml}!

%s

{b Resources}
{ul
    {- {{:https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/} Jane Street API}}
    {- {{:https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/core/} Core API}}
    {- {{:https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/async/#Std} Async API}}
    {- {{:https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/async/#Std.Pipe} Pipe API}}
    {- {{:https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/async/#Std.Ivar} Ivar API}}
    {- {{:https://realworldocaml.org/v1/en/html/concurrent-programming-with-async.html} Real World OCaml Chapter 18: Async}}
    {- {{:https://realworldocaml.org/v1/en/html/command-line-parsing.html} Real World OCaml Chapter 14: Command Line Parsing}}
    {- {{:https://www.cs.cornell.edu/Courses/cs3110/2015sp/schedule.php} Cornell's CS 3110 Lecture 18-21}}
}

{9 Chapter 2: Reader/Writer}
Whether it be files or TCP connections, programs often interact with the world
by reading and writing data to and from an external source. In this chapter,
we'll examine Async's Reader and Writer interfaces. These interfaces provide a
uniform way to read and write from all sorts of external sources. After this
chapter, you'll be able to read strings from stdin, and you'll be a master a
file IO. Readers and Writers will also crop up again when we cover TCP, so
you'll be prepared for that too.

%s

{b Resources}
{ul
    {- {{:https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/async/#Std.Reader} Reader API}}
    {- {{:https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/async/#Std.Writer} Writer API}}
}

{9 Chapter 3: TCP}
%s

{b Resources}
{ul
    {- {{:https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/async/#Std.Tcp} TCP API}}
}

{9 Chapter 4: Serialization}
%s


{b Resources}
{ul
    {- {{:https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/core/#Std.Sexp} Sexp API}}
    {- {{:http://caml.inria.fr/pub/docs/manual-ocaml/libref/Marshal.html} Marshal API}}
    {- {{:https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/core/#Std.Binable} Binable API}}
}

{9 Chapter 5: Messaging}
%s


{b Resources}
{ul
    {- {{:https://realworldocaml.org/v1/en/html/data-serialization-with-s-expressions.html} Real World OCaml S-Expressions}}
    {- {{:https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/async/#Std.Rpc} RPC API}}
    {- {{:https://bitbucket.org/yminsky/core-hello-world} Yaron Minsky's Core Hello World}}
}

{9 Chapter 6: Persistence}
%s

{8 Appendix }
The appendix contains miscellaneous programs and snippets on topics that may be
useful, but not necessary, to writing distributed systems.

{9 HTTP}
%s

