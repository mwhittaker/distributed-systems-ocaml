{2 Distributed Systems}

{9 Async}
Concurrency and parallelism are at the heart of distributed systems. When
programs scale to multiple threads, processes, or machines, we have to reason
about multiple computations that are all happening at the same time. In this
chapter, we explore Jane Street's monadic cooperative multithreading library:
Async. Async is a library that makes writing concurrent code fun and easy!
Async will also serve as a building block throughout the rest of the book; all
the code we write will involve async. Before we dive into some code, I
recommend you read
{{:https://realworldocaml.org/v1/en/html/concurrent-programming-with-async.html}
Chapter 18 of Real World Ocaml}!

%s

{b Resources}
{ul
    {- {{:https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/} Jane Street API}}
    {- {{:https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/core/} Core API}}
    {- {{:https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/async/#Std} Async API}}
    {- {{:https://realworldocaml.org/v1/en/html/concurrent-programming-with-async.html} Real World OCaml Chapter 18: Async}}
    {- {{:https://realworldocaml.org/v1/en/html/command-line-parsing.html} Real World OCaml Chapter 14: Command Line Parsing}}
    {- {{:https://www.cs.cornell.edu/Courses/cs3110/2015sp/schedule.php} Cornell's CS 3110 Lecture 18-21}}
}

{9 Reader/Writer}
%s

{b Resources}
{ul
    {- {{:https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/async/#Std.Reader} Reader API}}
    {- {{:https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/async/#Std.Writer} Writer API}}
}

{9 TCP}
%s

{b Resources}
{ul
    {- {{:https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/async/#Std.Tcp} TCP API}}
}

{9 Serialization}
%s


{b Resources}
{ul
    {- {{:https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/core/#Std.Sexp} Sexp API}}
    {- {{:http://caml.inria.fr/pub/docs/manual-ocaml/libref/Marshal.html} Marshal API}}
    {- {{:https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/core/#Std.Binable} Binable API}}
}

{9 Messaging}
%s


{b Resources}
{ul
    {- {{:https://realworldocaml.org/v1/en/html/data-serialization-with-s-expressions.html} Real World OCaml S-Expressions}}
    {- {{:https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/async/#Std.Rpc} RPC API}}
    {- {{:https://bitbucket.org/yminsky/core-hello-world} Yaron Minsky's Core Hello World}}
}

{9 Persistence}
%s

{9 HTTP}
%s

